clear;clc;
rng(128)

bg_alg      = 'REG';
data_dir    = './data/private';
ckpt        = './results_230805';
k_sz        = 3;
Od          = 50;
D           = 50*exp(-Od+50);
record      = 0;

% 19_INS_7_BGLs
% 33_INS_7_BGLs
% 14_INS_10_BGLs
% 21_INS_10_BGLs

exp_id = '33_INS_7_BGLs';
load_subjective_rankings;

[n_views, n_samples, n_bgls] = size(SubjectiveTest);
GT_data = squeeze(mean(SubjectiveTest,1))';

corrs = zeros(1, n_bgls);
raes = zeros(1, n_bgls);
mapes = zeros(1, n_bgls);

%% Main
for cnt = 1:1:n_bgls
    bgl = bgls(cnt);
    GT = arrank2(GT_data(cnt, :), 1, 'ascend');
    if record > 0
        save_dir = sprintf('%s/%d', ckpt, bgl);
        if exist(save_dir, 'file')==0; mkdir(save_dir); end
    end
    L_BGL = bgl / 255;
    fprintf('%s BGL experiments with %d samples\n', bgl, n_samples)
    
    for num=1:1:n_samples
        %% Load input Mura image
        Mura = double(imread(sprintf('%s/%d/Mura_%d.png', data_dir, bgl, num)));
        MFG = double(imread(sprintf('%s/%d/MFG_%d.png', data_dir, bgl, num)));
        [h, w] = size(Mura);
        
        %% Estimate base layer with polynomial regression
        Base = RegNlls2D(Mura, 1);
        if record > 0; imwrite(uint8(Base), sprintf('%s/%d/Base_%d.png', ckpt, bgl, num)); end
        
        %% Background-aware contrast map extraction
        [CMAP, NMAP] = cmap_fn(Mura, Base);
        if record > 0; imwrite(NMAP, sprintf('%s/%d/CMAP_%d.png', ckpt, bgl, num)); end
        
        %% Mura detection with region of interest
        CFG = AdaptiveThreshold(CMAP, MFG, 3);
        if record > 0; imwrite(CFG, sprintf('%s/%d/CFG_%d.png', ckpt, bgl, num)); end
        
        %% Extract average contrast, size, and length of major axis and minor axis
        [Cx, Sx, Ax] = FeatsExtr(CMAP, CFG);
        fprintf('Features (C_x: %f, S_x: %f, A_x: %f\n', Cx, Sx, Ax)
        
        w_c = -1.3365*L_BGL^2 + 2.0051*L_BGL + 0.1557;
        w_s = 0.4215*L_BGL^2 - 0.6156*L_BGL + 0.5495;
        w_a = 0.4031*L_BGL^2 - 0.5479*L_BGL + 0.5063;
        
        fprintf('Coefficient (w_c: %f, w_s: %f, w_a: %f\n', w_c, w_s, w_a)
        
        if bgl <= 48
            HPMI(num) = (Cx.*(Sx.^.7)*(Ax.^.33)) / D;
        else
            HPMI(num) = (Cx^(w_c)*Sx^(0.33*w_s)*Ax^(0.33*w_a)) / D;
        end
        fprintf("The %d-th sample's Mura level:\n", HPMI(num))
        fprintf('------------------------------\n');
    end
    
    %% Evaluations
    
    % Objective ranking (OR)
    HPMI_rank = arrank2(HPMI, 1, 'descend');
    hpmi(cnt, :) = HPMI_rank;
    
    % Pearson correlation coefficient (PCC)
    corrs(1, cnt) = pcc(HPMI_rank, GT);
    
    % Relative absolute errors
    raes(1, cnt) = rae(HPMI_rank, GT);
    
    % Mean absolute percentage errors
    mapes(1, cnt) = mape(HPMI_rank, GT);
    fprintf('%s BGL experiments with %d samples is done\n', bgl, n_samples)
end

rae_idx = 2*(1:1:n_bgls)-1;
mape_idx = 2*(1:1:n_bgls);

rae_mapes(:, rae_idx) = raes;
rae_mapes(:, mape_idx) = mapes;

function rst = rae(x, y)
lv = sum(abs(y-x));
tv = sum(abs(y-mean(y)));
rst = lv / tv;
end

function rst = mape(x, y)
rst = mean(abs((y-x)/y)); 
end

function rst = pcc(x,y)
corrs = zeros(size(y,1), 1);
for i=1:1:size(y,1)
    target = y(i,:);
    numerator = cov(x,target);
    denominator = std(x)*std(target);
    corr_mat = numerator./denominator;
    corrs(i) = corr_mat(1,2);
end
rst = mean(corrs);
end